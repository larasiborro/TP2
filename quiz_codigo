import 'dart:math';
import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(
    home: QuizScreen(level: 1),
  ));
}

/// Widget principal do ecrã do quiz.
class QuizScreen extends StatefulWidget {
  final int level;

  QuizScreen({Key? key, required this.level}) : super(key: key);

  @override
  _QuizScreenState createState() => _QuizScreenState();
}

class _QuizScreenState extends State<QuizScreen> {
  final Random _random = Random();
  late String _question;
  late bool _answer;
  int _score = 0;
  int _questionNumber = 0;
  bool _quizFinished = false;
  String _feedback = '';

  @override
  void initState() {
    super.initState();
    _generateQuestion();
  }

  /// Gera uma nova pergunta com base no nível atual.
  void _generateQuestion() {
    if (_quizFinished) return; // Para de gerar perguntas se o quiz tiver terminado

    _feedback = ''; // Reinicia o feedback para cada nova pergunta

    switch (widget.level) {
      case 1:
        _generateLevel1Question();
        break;
      case 2:
        _generateLevel2Question();
        break;
      case 3:
        _generateLevel3Question();
        break;
      default:
        _quizFinished = true;
        return;
    }

    // Determina aleatoriamente se "Sim" ou "Não" é a resposta correta
    _answer = _random.nextBool();

    _questionNumber++;

    // Debugging
    print('Generated Question: $_question');
    print('Expected Answer (Sim=true, Não=false): $_answer');
  }

  /// Gera uma pergunta para o nível 1.
  void _generateLevel1Question() {
    int octet1a = _random.nextInt(256);
    int octet2a = _random.nextInt(256);
    int octet3a = _random.nextInt(256);
    int octet4a = _random.nextInt(256);

    int octet1b = _random.nextInt(256);
    int octet2b = _random.nextInt(256);
    int octet3b = _random.nextInt(256);
    int octet4b = _random.nextInt(256);

    _question =
        'Os endereços $octet1a.$octet2a.$octet3a.$octet4a/24 e $octet1b.$octet2b.$octet3b.$octet4b/24 estão no mesmo segmento de rede?';

    // Debugging
    print('Generated Question (Level 1): $_question');
  }

  /// Gera uma pergunta para o nível 2.
  void _generateLevel2Question() {
    int octet1 = _random.nextInt(256);
    int octet2 = _random.nextInt(256);
    int octet3 = _random.nextInt(256);
    int octet4 = _random.nextInt(256);

    _question =
        'O endereço $octet1.$octet2.$octet3.$octet4/28 é um endereço de sub-rede?';

    // Debugging
    print('Generated Question (Level 2): $_question');
  }

  /// Gera uma pergunta para o nível 3.
  void _generateLevel3Question() {
    int octet1 = _random.nextInt(256);
    int octet2 = _random.nextInt(256);
    int octet3 = _random.nextInt(256);
    int octet4 = _random.nextInt(256);

    _question =
        'O endereço $octet1.$octet2.$octet3.$octet4/18 é um endereço de super-rede?';

    // Debugging
    print('Generated Question (Level 3): $_question');
  }

  /// Verifica a resposta do utilizador e atualiza o estado do quiz.
  void _checkAnswer(bool userAnswer) {
    bool isCorrect = userAnswer == _answer;

    setState(() {
      if (isCorrect) {
        _feedback = 'Resposta correta!';
        _score += widget.level == 1
            ? 10
            : widget.level == 2
                ? 20
                : 30;
      } else {
        _feedback = 'Resposta errada!';
        _score = (_score -
                (widget.level == 1
                    ? 5
                    : widget.level == 2
                        ? 10
                        : 15))
            .clamp(0, _score);
      }
    });

    // Verifica se o quiz terminou após responder
    if (_questionNumber >= 10) {
      _showNextLevelDialog();
    } else {
      // Gera a próxima pergunta imediatamente
      _generateQuestion();
    }
  }

  /// Mostra um diálogo para avançar para o próximo nível ou terminar o quiz.
  void _showNextLevelDialog() {
    if (widget.level == 3) {
      // Se for o nível 3, termina o quiz
      _finishQuiz();
    } else {
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Parabéns! Completou o nível ${widget.level}.'),
            content: Text('Deseja avançar para o próximo nível?'),
            actions: <Widget>[
              TextButton(
                child: Text('Sim'),
                onPressed: () {
                  Navigator.of(context).pop();
                  _goToNextLevel();
                },
              ),
              TextButton(
                child: Text('Não'),
                onPressed: () {
                  Navigator.of(context).pop();
                  _finishQuiz();
                },
              ),
            ],
          );
        },
      );
    }
  }

  /// Avança para o próximo nível do quiz.
  void _goToNextLevel() {
    setState(() {
      _score = 0;
      _questionNumber = 0;
      _quizFinished = false;
      _generateQuestion(); // Começa novas perguntas para o próximo nível
    });
  }

  /// Termina o quiz.
  void _finishQuiz() {
    setState(() {
      _quizFinished = true;
    });
  }

  /// Reinicia o quiz do início.
  void _resetQuiz() {
    setState(() {
      _score = 0;
      _questionNumber = 0;
      _quizFinished = false;
      _generateQuestion(); // Começa novas perguntas para o nível 1
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Quiz de Endereçamento IPv4'),
        backgroundColor: Colors.purple,
      ),
      body: _quizFinished
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    'Pontuação final: $_score',
                    style: const TextStyle(fontSize: 20.0),
                  ),
                  const SizedBox(height: 20.0),
                  ElevatedButton(
                    onPressed: () {
                      showDialog(
                        context: context,
                        builder: (context) => AlertDialog(
                          title: const Text('Jogo Terminado'),
                          content: const Text(
                              'Você terminou o jogo. Deseja jogar novamente?'),
                          actions: [
                            TextButton(
                              onPressed: () {
                                Navigator.of(context).pop();
                                _resetQuiz();
                              },
                              child: const Text('Sim'),
                            ),
                            TextButton(
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                              child: const Text('Não'),
                            ),
                          ],
                        ),
                      );
                    },
                    child: const Text('Reiniciar Jogo'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ],
              ),
            )
          : Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Text(
                    _question,
                    style: const TextStyle(fontSize: 20.0),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 20.0),
                  ElevatedButton(
                    onPressed: () => _checkAnswer(true),
                    child: const Text('Sim'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple,
                      foregroundColor: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 10.0),
                  ElevatedButton(
                    onPressed: () => _checkAnswer(false),
                    child: const Text('Não'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple,
                      foregroundColor: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 20.0),
                  Text(
                    _feedback,
                    style:
                        const TextStyle(fontSize: 18.0, color: Colors.purple),
                  ),
                  const SizedBox(height: 20.0),
                  Text(
                    'Pergunta $_questionNumber de 10',
                    style: const TextStyle(fontSize: 16.0),
                  ),
                  const SizedBox(height: 10.0),
                  Text(
                    'Pontuação: $_score',
                    style: const TextStyle(fontSize: 20.0),
                  ),
                ],
              ),
            ),
    );
  }
}
